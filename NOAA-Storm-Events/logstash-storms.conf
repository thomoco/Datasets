input {
 file { 
   path => "/Users/thom/Desktop/demo/data/NOAA-StormEvents/StormEvents-combined-all.csv"
   sincedb_path => "/dev/null"
   start_position => beginning
   type => "storms"
 }
}

filter {
 if ([message] =~ /^#|^BEGIN/) {
   drop{}
 }

 # columns from csv
 # BEGIN_YEARMONTH,BEGIN_DAY,BEGIN_TIME,END_YEARMONTH,END_DAY,END_TIME,EPISODE_ID,EVENT_ID,STATE,STATE_FIPS,YEAR,MONTH_NAME,EVENT_TYPE,CZ_TYPE,CZ_FIPS,CZ_NAME,WFO,BEGIN_DATE_TIME,CZ_TIMEZONE,END_DATE_TIME,INJURIES_DIRECT,INJURIES_INDIRECT,DEATHS_DIRECT,DEATHS_INDIRECT,DAMAGE_PROPERTY,DAMAGE_CROPS,SOURCE,MAGNITUDE,MAGNITUDE_TYPE,FLOOD_CAUSE,CATEGORY,TOR_F_SCALE,TOR_LENGTH,TOR_WIDTH,TOR_OTHER_WFO,TOR_OTHER_CZ_STATE,TOR_OTHER_CZ_FIPS,TOR_OTHER_CZ_NAME,BEGIN_RANGE,BEGIN_AZIMUTH,BEGIN_LOCATION,END_RANGE,END_AZIMUTH,END_LOCATION,BEGIN_LAT,BEGIN_LON,END_LAT,END_LON,EPISODE_NARRATIVE,EVENT_NARRATIVE,DATA_SOURCE

 csv {
   columns => [ "BEGIN_YEARMONTH","BEGIN_DAY","BEGIN_TIME","END_YEARMONTH","END_DAY","END_TIME","EPISODE_ID","EVENT_ID","STATE","STATE_FIPS","FULLYEAR","MONTH_NAME","EVENT_TYPE","CZ_TYPE","CZ_FIPS","CZ_NAME","WFO","BEGIN_DATE_TIME","CZ_TIMEZONE","END_DATE_TIME","INJURIES_DIRECT","INJURIES_INDIRECT","DEATHS_DIRECT","DEATHS_INDIRECT","DAMAGE_PROPERTY","DAMAGE_CROPS","SOURCE","MAGNITUDE","MAGNITUDE_TYPE","FLOOD_CAUSE","CATEGORY","TOR_F_SCALE","TOR_LENGTH","TOR_WIDTH","TOR_OTHER_WFO","TOR_OTHER_CZ_STATE","TOR_OTHER_CZ_FIPS","TOR_OTHER_CZ_NAME","BEGIN_RANGE","BEGIN_AZIMUTH","BEGIN_LOCATION","END_RANGE","END_AZIMUTH","END_LOCATION","BEGIN_LAT","BEGIN_LON","END_LAT","END_LON","EPISODE_NARRATIVE","EVENT_NARRATIVE","DATA_SOURCE" ]
   separator => ","
 }

 grok {
   match => { "CZ_TIMEZONE" => [ "(?<timezone1>\w+)(?<sign>[+-])(%{INT:timezone2})","(?<timezone1>\w+)" ] }
 }

 if !([sign]) {
    mutate {
     add_field => { "sign" => "+" }
    }
 }
 else if ([sign] =~ /^$/) {
    mutate { replace => [ "sign","+" ] }
 }

 if ([timezone2] =~ /^[0-9]$/) {
    mutate { replace => [ "timezone2","%{sign}0%{timezone2}:00" ] }
 }
 else if ([timezone2] =~ /^[1-2][0-9]$/) {
    mutate { replace => [ "timezone2","%{sign}%{timezone2}:00" ] }
 }
 else if ([timezone2] =~ /^$/) {
    mutate {
      add_tag => [ "no_timezone2" ]
    }
 }
 else if !([timezone2]) {
    mutate {
      add_tag => [ "no_timezone2" ]
    }
 }

  mutate {
    convert => { "FULLYEAR" => "integer" }
  }

 grok {
   patterns_dir => "./patterns"
   match => { "BEGIN_DATE_TIME" => "%{MONTHDAY:begin_monthday}-%{MONTHNAME:begin_month}-%{YEAR:begin_shortyear}%{SPACE}%{HOUR:begin_hour}:%{MINUTE:begin_minute}:%{SECOND:begin_second}" }
 }

 grok {
   patterns_dir => "./patterns"
   match => { "END_DATE_TIME"   => "%{MONTHDAY:end_monthday}-%{MONTHNAME:end_month}-%{YEAR:end_shortyear}%{SPACE}%{HOUR:end_hour}:%{MINUTE:end_minute}:%{SECOND:end_second}" }
 }

 if ("no_timezone2" in [tags]) {
   mutate {
     #add_field => { "BEGIN_DATE_TIME_FINAL" => "%{BEGIN_DATE_TIME} %{timezone1}" }
     #add_field => { "END_DATE_TIME_FINAL" => "%{END_DATE_TIME} %{timezone1}" }
     add_field => { "BEGIN_DATE_TIME_FINAL" => "%{begin_monthday}-%{begin_month}-%{FULLYEAR} %{begin_hour}:%{begin_minute}:%{begin_second} %{timezone1}" }
     add_field => { "END_DATE_TIME_FINAL" => "%{end_monthday}-%{end_month}-%{FULLYEAR} %{end_hour}:%{end_minute}:%{end_second} %{timezone1}" }
   }
 }
 else {
   mutate {
     #add_field => { "BEGIN_DATE_TIME_FINAL" => "%{BEGIN_DATE_TIME} %{timezone2}" }
     #add_field => { "END_DATE_TIME_FINAL" => "%{END_DATE_TIME} %{timezone2}" }
     add_field => { "BEGIN_DATE_TIME_FINAL" => "%{begin_monthday}-%{begin_month}-%{FULLYEAR} %{begin_hour}:%{begin_minute}:%{begin_second} %{timezone2}" }
     add_field => { "END_DATE_TIME_FINAL" => "%{end_monthday}-%{end_month}-%{FULLYEAR} %{end_hour}:%{end_minute}:%{end_second} %{timezone2}" }
   }
 }

 date {
   match => [ "BEGIN_DATE_TIME_FINAL", "dd-MMM-yyyy HH:mm:ss Z", "dd-MMM-yyyy HH:mm:ss z" ]
   target => "@timestamp"
 }

  mutate {
    convert => { "DAMAGE_PROPERTY" => "string" }
    convert => { "DAMAGE_CROPS" => "string" }
 }

 if ([DAMAGE_PROPERTY] and [DAMAGE_CROPS]) {
  mutate {
    gsub => [
      # replace all forward slashes with underscore
      "DAMAGE_PROPERTY", "K", "",
      "DAMAGE_CROPS", "K", ""
    ]
    convert => { "DAMAGE_PROPERTY" => "float" }
    convert => { "DAMAGE_CROPS" => "float" }
  }
 }

 if ([BEGIN_LAT] and [BEGIN_LON]) {
  mutate {
    convert => { "BEGIN_LAT" => "float" }
    convert => { "BEGIN_LON" => "float" }
  }
  mutate {
    #add_field => { "[location]" => [ "%{BEGIN_LON}", "%{BEGIN_LAT}" ] }
    add_field => { "[location][lat]" => "%{BEGIN_LAT}" }
    add_field => { "[location][lon]" => "%{BEGIN_LON}" }
  }
 }

 if ([END_LAT] and [END_LON]) {
  mutate {
    convert => [ "END_LAT", "float" ]
    convert => [ "END_LON", "float" ]
  }
  mutate {
    #add_field => { "[end_location]" => [ "%{END_LON}", "%{END_LAT}" ] }
    add_field => { "[end_location][lat]" => "%{END_LAT}" }
    add_field => { "[end_location][lon]" => "%{END_LON}" }
  }
 }

}

output {
 elasticsearch {
   #protocol => "http"
   action => "index"
   hosts => "localhost:9200"
   index => "logstash-storms"
   document_type => "storms"
   user => "logstash"
   password => "3l@st1c"
   manage_template => false
 } 
 stdout {
   codec => rubydebug
 }
}
